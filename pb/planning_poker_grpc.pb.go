// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0
// source: proto/planning_poker.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlanningPokerClient is the client API for PlanningPoker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanningPokerClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (PlanningPoker_ConnectClient, error)
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	ShowVotes(ctx context.Context, in *ShowVotesRequest, opts ...grpc.CallOption) (*ShowVotesResponse, error)
	NewGame(ctx context.Context, in *NewGameRequest, opts ...grpc.CallOption) (*NewGameResponse, error)
}

type planningPokerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanningPokerClient(cc grpc.ClientConnInterface) PlanningPokerClient {
	return &planningPokerClient{cc}
}

func (c *planningPokerClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (PlanningPoker_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlanningPoker_ServiceDesc.Streams[0], "/planning_poker.PlanningPoker/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &planningPokerConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlanningPoker_ConnectClient interface {
	Recv() (*ConnectResponse, error)
	grpc.ClientStream
}

type planningPokerConnectClient struct {
	grpc.ClientStream
}

func (x *planningPokerConnectClient) Recv() (*ConnectResponse, error) {
	m := new(ConnectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *planningPokerClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/planning_poker.PlanningPoker/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planningPokerClient) ShowVotes(ctx context.Context, in *ShowVotesRequest, opts ...grpc.CallOption) (*ShowVotesResponse, error) {
	out := new(ShowVotesResponse)
	err := c.cc.Invoke(ctx, "/planning_poker.PlanningPoker/ShowVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planningPokerClient) NewGame(ctx context.Context, in *NewGameRequest, opts ...grpc.CallOption) (*NewGameResponse, error) {
	out := new(NewGameResponse)
	err := c.cc.Invoke(ctx, "/planning_poker.PlanningPoker/NewGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanningPokerServer is the server API for PlanningPoker service.
// All implementations must embed UnimplementedPlanningPokerServer
// for forward compatibility
type PlanningPokerServer interface {
	Connect(*ConnectRequest, PlanningPoker_ConnectServer) error
	Vote(context.Context, *VoteRequest) (*VoteResponse, error)
	ShowVotes(context.Context, *ShowVotesRequest) (*ShowVotesResponse, error)
	NewGame(context.Context, *NewGameRequest) (*NewGameResponse, error)
	mustEmbedUnimplementedPlanningPokerServer()
}

// UnimplementedPlanningPokerServer must be embedded to have forward compatible implementations.
type UnimplementedPlanningPokerServer struct {
}

func (UnimplementedPlanningPokerServer) Connect(*ConnectRequest, PlanningPoker_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedPlanningPokerServer) Vote(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedPlanningPokerServer) ShowVotes(context.Context, *ShowVotesRequest) (*ShowVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowVotes not implemented")
}
func (UnimplementedPlanningPokerServer) NewGame(context.Context, *NewGameRequest) (*NewGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGame not implemented")
}
func (UnimplementedPlanningPokerServer) mustEmbedUnimplementedPlanningPokerServer() {}

// UnsafePlanningPokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanningPokerServer will
// result in compilation errors.
type UnsafePlanningPokerServer interface {
	mustEmbedUnimplementedPlanningPokerServer()
}

func RegisterPlanningPokerServer(s grpc.ServiceRegistrar, srv PlanningPokerServer) {
	s.RegisterService(&PlanningPoker_ServiceDesc, srv)
}

func _PlanningPoker_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlanningPokerServer).Connect(m, &planningPokerConnectServer{stream})
}

type PlanningPoker_ConnectServer interface {
	Send(*ConnectResponse) error
	grpc.ServerStream
}

type planningPokerConnectServer struct {
	grpc.ServerStream
}

func (x *planningPokerConnectServer) Send(m *ConnectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PlanningPoker_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningPokerServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planning_poker.PlanningPoker/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningPokerServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanningPoker_ShowVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningPokerServer).ShowVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planning_poker.PlanningPoker/ShowVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningPokerServer).ShowVotes(ctx, req.(*ShowVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanningPoker_NewGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningPokerServer).NewGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planning_poker.PlanningPoker/NewGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningPokerServer).NewGame(ctx, req.(*NewGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanningPoker_ServiceDesc is the grpc.ServiceDesc for PlanningPoker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanningPoker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "planning_poker.PlanningPoker",
	HandlerType: (*PlanningPokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _PlanningPoker_Vote_Handler,
		},
		{
			MethodName: "ShowVotes",
			Handler:    _PlanningPoker_ShowVotes_Handler,
		},
		{
			MethodName: "NewGame",
			Handler:    _PlanningPoker_NewGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _PlanningPoker_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/planning_poker.proto",
}
