// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file proto/v1/planning_poker.proto (package proto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum proto.v1.MessageType
 */
export enum MessageType {
  /**
   * @generated from enum value: MESSAGE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MESSAGE_TYPE_JOIN = 1;
   */
  JOIN = 1,

  /**
   * @generated from enum value: MESSAGE_TYPE_VOTE = 2;
   */
  VOTE = 2,

  /**
   * @generated from enum value: MESSAGE_TYPE_SHOW_VOTES = 3;
   */
  SHOW_VOTES = 3,

  /**
   * @generated from enum value: MESSAGE_TYPE_LEAVE = 4;
   */
  LEAVE = 4,

  /**
   * @generated from enum value: MESSAGE_TYPE_NEW_GAME = 5;
   */
  NEW_GAME = 5,

  /**
   * @generated from enum value: MESSAGE_TYPE_CREATE_ROOM = 6;
   */
  CREATE_ROOM = 6,

  /**
   * @generated from enum value: MESSAGE_TYPE_STATUS = 7;
   */
  STATUS = 7,

  /**
   * @generated from enum value: MESSAGE_TYPE_RESET_VOTE = 8;
   */
  RESET_VOTE = 8,
}
// Retrieve enum metadata with: proto3.getEnumType(MessageType)
proto3.util.setEnumType(MessageType, "proto.v1.MessageType", [
  { no: 0, name: "MESSAGE_TYPE_UNSPECIFIED" },
  { no: 1, name: "MESSAGE_TYPE_JOIN" },
  { no: 2, name: "MESSAGE_TYPE_VOTE" },
  { no: 3, name: "MESSAGE_TYPE_SHOW_VOTES" },
  { no: 4, name: "MESSAGE_TYPE_LEAVE" },
  { no: 5, name: "MESSAGE_TYPE_NEW_GAME" },
  { no: 6, name: "MESSAGE_TYPE_CREATE_ROOM" },
  { no: 7, name: "MESSAGE_TYPE_STATUS" },
  { no: 8, name: "MESSAGE_TYPE_RESET_VOTE" },
]);

/**
 * @generated from message proto.v1.CreateRoomRequest
 */
export class CreateRoomRequest extends Message<CreateRoomRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string room_id = 2;
   */
  roomId = "";

  constructor(data?: PartialMessage<CreateRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.v1.CreateRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined, b: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined): boolean {
    return proto3.util.equals(CreateRoomRequest, a, b);
  }
}

/**
 * @generated from message proto.v1.ConnectRequest
 */
export class ConnectRequest extends Message<ConnectRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string room_id = 2;
   */
  roomId = "";

  constructor(data?: PartialMessage<ConnectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.v1.ConnectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectRequest {
    return new ConnectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectRequest | PlainMessage<ConnectRequest> | undefined, b: ConnectRequest | PlainMessage<ConnectRequest> | undefined): boolean {
    return proto3.util.equals(ConnectRequest, a, b);
  }
}

/**
 * @generated from message proto.v1.ConnectResponse
 */
export class ConnectResponse extends Message<ConnectResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: proto.v1.MessageType type = 2;
   */
  type = MessageType.UNSPECIFIED;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<ConnectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.v1.ConnectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(MessageType) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectResponse {
    return new ConnectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectResponse {
    return new ConnectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectResponse {
    return new ConnectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectResponse | PlainMessage<ConnectResponse> | undefined, b: ConnectResponse | PlainMessage<ConnectResponse> | undefined): boolean {
    return proto3.util.equals(ConnectResponse, a, b);
  }
}

/**
 * @generated from message proto.v1.VoteRequest
 */
export class VoteRequest extends Message<VoteRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int32 vote = 2;
   */
  vote = 0;

  /**
   * @generated from field: string room_id = 3;
   */
  roomId = "";

  constructor(data?: PartialMessage<VoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.v1.VoteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vote", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteRequest {
    return new VoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteRequest {
    return new VoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteRequest {
    return new VoteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VoteRequest | PlainMessage<VoteRequest> | undefined, b: VoteRequest | PlainMessage<VoteRequest> | undefined): boolean {
    return proto3.util.equals(VoteRequest, a, b);
  }
}

/**
 * @generated from message proto.v1.VoteResponse
 */
export class VoteResponse extends Message<VoteResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<VoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.v1.VoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteResponse {
    return new VoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteResponse {
    return new VoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteResponse {
    return new VoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VoteResponse | PlainMessage<VoteResponse> | undefined, b: VoteResponse | PlainMessage<VoteResponse> | undefined): boolean {
    return proto3.util.equals(VoteResponse, a, b);
  }
}

/**
 * @generated from message proto.v1.ShowVotesRequest
 */
export class ShowVotesRequest extends Message<ShowVotesRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string room_id = 2;
   */
  roomId = "";

  constructor(data?: PartialMessage<ShowVotesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.v1.ShowVotesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShowVotesRequest {
    return new ShowVotesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShowVotesRequest {
    return new ShowVotesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShowVotesRequest {
    return new ShowVotesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ShowVotesRequest | PlainMessage<ShowVotesRequest> | undefined, b: ShowVotesRequest | PlainMessage<ShowVotesRequest> | undefined): boolean {
    return proto3.util.equals(ShowVotesRequest, a, b);
  }
}

/**
 * @generated from message proto.v1.ShowVotesResponse
 */
export class ShowVotesResponse extends Message<ShowVotesResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<ShowVotesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.v1.ShowVotesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShowVotesResponse {
    return new ShowVotesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShowVotesResponse {
    return new ShowVotesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShowVotesResponse {
    return new ShowVotesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ShowVotesResponse | PlainMessage<ShowVotesResponse> | undefined, b: ShowVotesResponse | PlainMessage<ShowVotesResponse> | undefined): boolean {
    return proto3.util.equals(ShowVotesResponse, a, b);
  }
}

/**
 * @generated from message proto.v1.NewGameRequest
 */
export class NewGameRequest extends Message<NewGameRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string room_id = 2;
   */
  roomId = "";

  constructor(data?: PartialMessage<NewGameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.v1.NewGameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewGameRequest {
    return new NewGameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewGameRequest {
    return new NewGameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewGameRequest {
    return new NewGameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewGameRequest | PlainMessage<NewGameRequest> | undefined, b: NewGameRequest | PlainMessage<NewGameRequest> | undefined): boolean {
    return proto3.util.equals(NewGameRequest, a, b);
  }
}

/**
 * @generated from message proto.v1.NewGameResponse
 */
export class NewGameResponse extends Message<NewGameResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<NewGameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.v1.NewGameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewGameResponse {
    return new NewGameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewGameResponse {
    return new NewGameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewGameResponse {
    return new NewGameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewGameResponse | PlainMessage<NewGameResponse> | undefined, b: NewGameResponse | PlainMessage<NewGameResponse> | undefined): boolean {
    return proto3.util.equals(NewGameResponse, a, b);
  }
}

