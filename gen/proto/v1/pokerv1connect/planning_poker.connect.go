// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: proto/v1/planning_poker.proto

package pokerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/machimachida/grpc-planning-poker/gen/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// PlanningPokerServiceName is the fully-qualified name of the PlanningPokerService service.
	PlanningPokerServiceName = "proto.v1.PlanningPokerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PlanningPokerServiceCreateRoomProcedure is the fully-qualified name of the PlanningPokerService's
	// CreateRoom RPC.
	PlanningPokerServiceCreateRoomProcedure = "/proto.v1.PlanningPokerService/CreateRoom"
	// PlanningPokerServiceConnectProcedure is the fully-qualified name of the PlanningPokerService's
	// Connect RPC.
	PlanningPokerServiceConnectProcedure = "/proto.v1.PlanningPokerService/Connect"
	// PlanningPokerServiceVoteProcedure is the fully-qualified name of the PlanningPokerService's Vote
	// RPC.
	PlanningPokerServiceVoteProcedure = "/proto.v1.PlanningPokerService/Vote"
	// PlanningPokerServiceShowVotesProcedure is the fully-qualified name of the PlanningPokerService's
	// ShowVotes RPC.
	PlanningPokerServiceShowVotesProcedure = "/proto.v1.PlanningPokerService/ShowVotes"
	// PlanningPokerServiceNewGameProcedure is the fully-qualified name of the PlanningPokerService's
	// NewGame RPC.
	PlanningPokerServiceNewGameProcedure = "/proto.v1.PlanningPokerService/NewGame"
)

// PlanningPokerServiceClient is a client for the proto.v1.PlanningPokerService service.
type PlanningPokerServiceClient interface {
	CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest]) (*connect.ServerStreamForClient[v1.ConnectResponse], error)
	Connect(context.Context, *connect.Request[v1.ConnectRequest]) (*connect.ServerStreamForClient[v1.ConnectResponse], error)
	Vote(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error)
	ShowVotes(context.Context, *connect.Request[v1.ShowVotesRequest]) (*connect.Response[v1.ShowVotesResponse], error)
	NewGame(context.Context, *connect.Request[v1.NewGameRequest]) (*connect.Response[v1.NewGameResponse], error)
}

// NewPlanningPokerServiceClient constructs a client for the proto.v1.PlanningPokerService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlanningPokerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PlanningPokerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &planningPokerServiceClient{
		createRoom: connect.NewClient[v1.CreateRoomRequest, v1.ConnectResponse](
			httpClient,
			baseURL+PlanningPokerServiceCreateRoomProcedure,
			opts...,
		),
		connect: connect.NewClient[v1.ConnectRequest, v1.ConnectResponse](
			httpClient,
			baseURL+PlanningPokerServiceConnectProcedure,
			opts...,
		),
		vote: connect.NewClient[v1.VoteRequest, v1.VoteResponse](
			httpClient,
			baseURL+PlanningPokerServiceVoteProcedure,
			opts...,
		),
		showVotes: connect.NewClient[v1.ShowVotesRequest, v1.ShowVotesResponse](
			httpClient,
			baseURL+PlanningPokerServiceShowVotesProcedure,
			opts...,
		),
		newGame: connect.NewClient[v1.NewGameRequest, v1.NewGameResponse](
			httpClient,
			baseURL+PlanningPokerServiceNewGameProcedure,
			opts...,
		),
	}
}

// planningPokerServiceClient implements PlanningPokerServiceClient.
type planningPokerServiceClient struct {
	createRoom *connect.Client[v1.CreateRoomRequest, v1.ConnectResponse]
	connect    *connect.Client[v1.ConnectRequest, v1.ConnectResponse]
	vote       *connect.Client[v1.VoteRequest, v1.VoteResponse]
	showVotes  *connect.Client[v1.ShowVotesRequest, v1.ShowVotesResponse]
	newGame    *connect.Client[v1.NewGameRequest, v1.NewGameResponse]
}

// CreateRoom calls proto.v1.PlanningPokerService.CreateRoom.
func (c *planningPokerServiceClient) CreateRoom(ctx context.Context, req *connect.Request[v1.CreateRoomRequest]) (*connect.ServerStreamForClient[v1.ConnectResponse], error) {
	return c.createRoom.CallServerStream(ctx, req)
}

// Connect calls proto.v1.PlanningPokerService.Connect.
func (c *planningPokerServiceClient) Connect(ctx context.Context, req *connect.Request[v1.ConnectRequest]) (*connect.ServerStreamForClient[v1.ConnectResponse], error) {
	return c.connect.CallServerStream(ctx, req)
}

// Vote calls proto.v1.PlanningPokerService.Vote.
func (c *planningPokerServiceClient) Vote(ctx context.Context, req *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error) {
	return c.vote.CallUnary(ctx, req)
}

// ShowVotes calls proto.v1.PlanningPokerService.ShowVotes.
func (c *planningPokerServiceClient) ShowVotes(ctx context.Context, req *connect.Request[v1.ShowVotesRequest]) (*connect.Response[v1.ShowVotesResponse], error) {
	return c.showVotes.CallUnary(ctx, req)
}

// NewGame calls proto.v1.PlanningPokerService.NewGame.
func (c *planningPokerServiceClient) NewGame(ctx context.Context, req *connect.Request[v1.NewGameRequest]) (*connect.Response[v1.NewGameResponse], error) {
	return c.newGame.CallUnary(ctx, req)
}

// PlanningPokerServiceHandler is an implementation of the proto.v1.PlanningPokerService service.
type PlanningPokerServiceHandler interface {
	CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest], *connect.ServerStream[v1.ConnectResponse]) error
	Connect(context.Context, *connect.Request[v1.ConnectRequest], *connect.ServerStream[v1.ConnectResponse]) error
	Vote(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error)
	ShowVotes(context.Context, *connect.Request[v1.ShowVotesRequest]) (*connect.Response[v1.ShowVotesResponse], error)
	NewGame(context.Context, *connect.Request[v1.NewGameRequest]) (*connect.Response[v1.NewGameResponse], error)
}

// NewPlanningPokerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlanningPokerServiceHandler(svc PlanningPokerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	planningPokerServiceCreateRoomHandler := connect.NewServerStreamHandler(
		PlanningPokerServiceCreateRoomProcedure,
		svc.CreateRoom,
		opts...,
	)
	planningPokerServiceConnectHandler := connect.NewServerStreamHandler(
		PlanningPokerServiceConnectProcedure,
		svc.Connect,
		opts...,
	)
	planningPokerServiceVoteHandler := connect.NewUnaryHandler(
		PlanningPokerServiceVoteProcedure,
		svc.Vote,
		opts...,
	)
	planningPokerServiceShowVotesHandler := connect.NewUnaryHandler(
		PlanningPokerServiceShowVotesProcedure,
		svc.ShowVotes,
		opts...,
	)
	planningPokerServiceNewGameHandler := connect.NewUnaryHandler(
		PlanningPokerServiceNewGameProcedure,
		svc.NewGame,
		opts...,
	)
	return "/proto.v1.PlanningPokerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlanningPokerServiceCreateRoomProcedure:
			planningPokerServiceCreateRoomHandler.ServeHTTP(w, r)
		case PlanningPokerServiceConnectProcedure:
			planningPokerServiceConnectHandler.ServeHTTP(w, r)
		case PlanningPokerServiceVoteProcedure:
			planningPokerServiceVoteHandler.ServeHTTP(w, r)
		case PlanningPokerServiceShowVotesProcedure:
			planningPokerServiceShowVotesHandler.ServeHTTP(w, r)
		case PlanningPokerServiceNewGameProcedure:
			planningPokerServiceNewGameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlanningPokerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPlanningPokerServiceHandler struct{}

func (UnimplementedPlanningPokerServiceHandler) CreateRoom(context.Context, *connect.Request[v1.CreateRoomRequest], *connect.ServerStream[v1.ConnectResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.PlanningPokerService.CreateRoom is not implemented"))
}

func (UnimplementedPlanningPokerServiceHandler) Connect(context.Context, *connect.Request[v1.ConnectRequest], *connect.ServerStream[v1.ConnectResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.PlanningPokerService.Connect is not implemented"))
}

func (UnimplementedPlanningPokerServiceHandler) Vote(context.Context, *connect.Request[v1.VoteRequest]) (*connect.Response[v1.VoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.PlanningPokerService.Vote is not implemented"))
}

func (UnimplementedPlanningPokerServiceHandler) ShowVotes(context.Context, *connect.Request[v1.ShowVotesRequest]) (*connect.Response[v1.ShowVotesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.PlanningPokerService.ShowVotes is not implemented"))
}

func (UnimplementedPlanningPokerServiceHandler) NewGame(context.Context, *connect.Request[v1.NewGameRequest]) (*connect.Response[v1.NewGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.PlanningPokerService.NewGame is not implemented"))
}
